# README #

## debug.lua ##

Author: Gunnar ZÃ¶tl , 2014.  
Released under MIT/X11 license. See file LICENSE for details.

## Introduction ##

debug.lua is a terminal based standalone frontend for mobdebug. Because
it is terminal based, it is navigated only with the keyboard, but I
tried to make it somewhat comfortable to use.

## Installing ##

depends on termfx, mobdebug and luasocket

TODO

### Command Line Arguments ###

`-h, -?`
:	get help on invocation

`-p port`
:	change port number

`-d dir`
:	set local basedir

`-x file`
:	execute debugger commands in file

`-l file`
:	save output log to file

## Using ##

you start debug.lua by typing

	debug.lua

into your shell. You should then see the startup screen, which informs
you on which port debug.lua is waiting for connections from a mobdebug
client. Normally this is 8172.

Then start the skript to be debugged. As debug.lua used mobdebug, the
debuggee needs to be prepared as described in the mobdebug docs, either
by adding

	require("mobdebug").start()

at the beginning, or by starting it with

	lua -e "require('mobdebug').start()" debuggee.lua

debug.lua will then enter the debugging display. At the top of the
screen there is a status line telling you which skript you're debugging
and where the base directory for that skript is. Below that is a source
browser in the top two thirds of the screen, plus a command display in
the bottom third. The source browser has it's own status line at it's
bottom, with the current file name and line number, and on the right the
number of currently pinned expressions. The pinned expressions display
is closed when there are no pinned expressions, but you can also close
and reopen it if there are, using the `P` command.

### The Source Display ###

### The Pinned Expressions Display ###

### The Command Display ###

### Debugger Commands ###

Debugger commands come in 2 varieties, those without arguments and those
with. Commands without arguments are executed immediately, without the
need to press enter. Commands with arguments present a command line, in
which you can type the arguments (like the line number for a breakpoint),
and are executed as soon as you press return. If you accidentially
activated the command line input, you can escape from it using the Escape
key.

#### Debugging Commands ####

`n`
:	step over next statement. This does not step into function calls.

`s`
:	step into next statement. This steps into function calls.

`r`
:	run or continue program to the next breakpoint or until finished.

`o`
:	continue the program to the next breakpoint or until the next line
	after the call to the currently executing function.

`t [num]`
:	trace execution until the to breakpoint or until finished. If num
	is given, then traces for num steps only.

`b [file] line`
:	set breakpoint. If you selected a line in the source file using the
	cursor keys, and that line is breakable, then the command line will
	be prepopulated with `b` plus this line number, otherwise it will
	you need to enter the arguments. If file is omitted, uses the file
	currently in the source display.

`db [[file] line]`
:	delete breakpoint. If you selected a line in the source file using
	the cursor keys, and that line has a breakpoint, and you press the
	`d`, then the command line will be prepopulated with `db` plus this
	line number, otherwise it will you need to enter the arguments. If
	file is omitted, uses the file currently in the source display. If
	used without arguments, this deletes all breakpoints.

`= expr`
:	evaluate an expression in the current context.

`! expr`
:	pin an expression. Pinned expressions are evaluated whenever the
	debugger stops (after `s`, `n`, `r`, `o` or `c` commmands), if the
	pinned expressions display is showing.

`d! [num]`
:	delete pinned expression num, or if called without argument, delete
	all pinned expressions.

`R`
:	restart debugging session. This does not work for me, but it seems
	to be a problem with mobdebug...

#### Source Navigation and other Commands ####

`B dir`
:	set basedir.

`L dir`
:	set only local basedir. Normally the local basedir is obtained from
	the debuggee, but if that runs on a remote machine, you need to set
	the local basedir to point to a local copy of the debuggee using this.

`G [file] num`
:	go to and select line number num in file file, or if that was omitted
	in the current file. If file is given and has not already been loaded,
	load the file.

up/down/page up/page down
:	navigate source file

left/right    
:	select current line

.             
:	reset view: cancel any line selection and return to the current
	debugging position.
`P`
:	toggle pinned expressions display. Note that the pinned expressions
	display can only be shown if there are pinned expressions.

`W[b|!] [file]`
:	write setup. Lists the commands for either all breakpoints (`Wb`),
	all pinned expressions (`W!`) or both (`W`). If file is given, writes
	the commands to the file (which can then be loaded at startup with
	the `-x`command line option), else writes it to the command display.

`h`
:	show a quick help on these commands.

`q`
:	quit debug.lua

### Debugging Coroutines ###


## References ##

Check the mobdebug documentation at https://github.com/pkulchenko/MobDebug
